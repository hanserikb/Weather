//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("WeatherApp.Models", "FK_WeatherData_GeoName", "GeoName", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WeatherApp.Models.GeoName), "WeatherData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WeatherApp.Models.WeatherData), true)]

#endregion

namespace WeatherApp.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class WeatherEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new WeatherEntities object using the connection string found in the 'WeatherEntities' section of the application configuration file.
        /// </summary>
        public WeatherEntities() : base("name=WeatherEntities", "WeatherEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new WeatherEntities object.
        /// </summary>
        public WeatherEntities(string connectionString) : base(connectionString, "WeatherEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new WeatherEntities object.
        /// </summary>
        public WeatherEntities(EntityConnection connection) : base(connection, "WeatherEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeoName> GeoNameSet
        {
            get
            {
                if ((_GeoNameSet == null))
                {
                    _GeoNameSet = base.CreateObjectSet<GeoName>("GeoNameSet");
                }
                return _GeoNameSet;
            }
        }
        private ObjectSet<GeoName> _GeoNameSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WeatherData> WeatherDataSet
        {
            get
            {
                if ((_WeatherDataSet == null))
                {
                    _WeatherDataSet = base.CreateObjectSet<WeatherData>("WeatherDataSet");
                }
                return _WeatherDataSet;
            }
        }
        private ObjectSet<WeatherData> _WeatherDataSet;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeoNameSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeoNameSet(GeoName geoName)
        {
            base.AddObject("GeoNameSet", geoName);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WeatherDataSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWeatherDataSet(WeatherData weatherData)
        {
            base.AddObject("WeatherDataSet", weatherData);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WeatherApp.Models", Name="GeoName")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeoName : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeoName object.
        /// </summary>
        /// <param name="locationId">Initial value of the locationId property.</param>
        /// <param name="countyName">Initial value of the countyName property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="countryName">Initial value of the countryName property.</param>
        /// <param name="latitude">Initial value of the latitude property.</param>
        /// <param name="longitude">Initial value of the longitude property.</param>
        /// <param name="geoNameId">Initial value of the geoNameId property.</param>
        public static GeoName CreateGeoName(global::System.Int32 locationId, global::System.String countyName, global::System.String name, global::System.String countryName, global::System.Double latitude, global::System.Double longitude, global::System.Int32 geoNameId)
        {
            GeoName geoName = new GeoName();
            geoName.locationId = locationId;
            geoName.countyName = countyName;
            geoName.name = name;
            geoName.countryName = countryName;
            geoName.latitude = latitude;
            geoName.longitude = longitude;
            geoName.geoNameId = geoNameId;
            return geoName;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 locationId
        {
            get
            {
                return _locationId;
            }
            set
            {
                if (_locationId != value)
                {
                    OnlocationIdChanging(value);
                    ReportPropertyChanging("locationId");
                    _locationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("locationId");
                    OnlocationIdChanged();
                }
            }
        }
        private global::System.Int32 _locationId;
        partial void OnlocationIdChanging(global::System.Int32 value);
        partial void OnlocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String countyName
        {
            get
            {
                return _countyName;
            }
            set
            {
                OncountyNameChanging(value);
                ReportPropertyChanging("countyName");
                _countyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("countyName");
                OncountyNameChanged();
            }
        }
        private global::System.String _countyName;
        partial void OncountyNameChanging(global::System.String value);
        partial void OncountyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String countryName
        {
            get
            {
                return _countryName;
            }
            set
            {
                OncountryNameChanging(value);
                ReportPropertyChanging("countryName");
                _countryName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("countryName");
                OncountryNameChanged();
            }
        }
        private global::System.String _countryName;
        partial void OncountryNameChanging(global::System.String value);
        partial void OncountryNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double latitude
        {
            get
            {
                return _latitude;
            }
            set
            {
                OnlatitudeChanging(value);
                ReportPropertyChanging("latitude");
                _latitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("latitude");
                OnlatitudeChanged();
            }
        }
        private global::System.Double _latitude;
        partial void OnlatitudeChanging(global::System.Double value);
        partial void OnlatitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double longitude
        {
            get
            {
                return _longitude;
            }
            set
            {
                OnlongitudeChanging(value);
                ReportPropertyChanging("longitude");
                _longitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("longitude");
                OnlongitudeChanged();
            }
        }
        private global::System.Double _longitude;
        partial void OnlongitudeChanging(global::System.Double value);
        partial void OnlongitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 geoNameId
        {
            get
            {
                return _geoNameId;
            }
            set
            {
                OngeoNameIdChanging(value);
                ReportPropertyChanging("geoNameId");
                _geoNameId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("geoNameId");
                OngeoNameIdChanged();
            }
        }
        private global::System.Int32 _geoNameId;
        partial void OngeoNameIdChanging(global::System.Int32 value);
        partial void OngeoNameIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WeatherApp.Models", "FK_WeatherData_GeoName", "WeatherData")]
        public EntityCollection<WeatherData> WeatherDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WeatherData>("WeatherApp.Models.FK_WeatherData_GeoName", "WeatherData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WeatherData>("WeatherApp.Models.FK_WeatherData_GeoName", "WeatherData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WeatherApp.Models", Name="WeatherData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WeatherData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WeatherData object.
        /// </summary>
        /// <param name="locationId">Initial value of the locationId property.</param>
        /// <param name="weatherDataId">Initial value of the weatherDataId property.</param>
        /// <param name="nextUpdate">Initial value of the nextUpdate property.</param>
        /// <param name="lastUpdate">Initial value of the lastUpdate property.</param>
        /// <param name="timeFrom">Initial value of the timeFrom property.</param>
        /// <param name="timeTo">Initial value of the timeTo property.</param>
        /// <param name="period">Initial value of the period property.</param>
        /// <param name="symbolNumber">Initial value of the symbolNumber property.</param>
        /// <param name="windDirection">Initial value of the windDirection property.</param>
        /// <param name="windDegrees">Initial value of the windDegrees property.</param>
        /// <param name="windSpeed">Initial value of the windSpeed property.</param>
        /// <param name="temperature">Initial value of the temperature property.</param>
        /// <param name="pressure">Initial value of the pressure property.</param>
        /// <param name="precipitation">Initial value of the precipitation property.</param>
        public static WeatherData CreateWeatherData(global::System.Int32 locationId, global::System.Int32 weatherDataId, global::System.DateTime nextUpdate, global::System.DateTime lastUpdate, global::System.DateTime timeFrom, global::System.DateTime timeTo, global::System.Int32 period, global::System.Int32 symbolNumber, global::System.String windDirection, global::System.Double windDegrees, global::System.Double windSpeed, global::System.Double temperature, global::System.Double pressure, global::System.Double precipitation)
        {
            WeatherData weatherData = new WeatherData();
            weatherData.locationId = locationId;
            weatherData.weatherDataId = weatherDataId;
            weatherData.nextUpdate = nextUpdate;
            weatherData.lastUpdate = lastUpdate;
            weatherData.timeFrom = timeFrom;
            weatherData.timeTo = timeTo;
            weatherData.period = period;
            weatherData.symbolNumber = symbolNumber;
            weatherData.windDirection = windDirection;
            weatherData.windDegrees = windDegrees;
            weatherData.windSpeed = windSpeed;
            weatherData.temperature = temperature;
            weatherData.pressure = pressure;
            weatherData.precipitation = precipitation;
            return weatherData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 locationId
        {
            get
            {
                return _locationId;
            }
            set
            {
                OnlocationIdChanging(value);
                ReportPropertyChanging("locationId");
                _locationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("locationId");
                OnlocationIdChanged();
            }
        }
        private global::System.Int32 _locationId;
        partial void OnlocationIdChanging(global::System.Int32 value);
        partial void OnlocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 weatherDataId
        {
            get
            {
                return _weatherDataId;
            }
            set
            {
                if (_weatherDataId != value)
                {
                    OnweatherDataIdChanging(value);
                    ReportPropertyChanging("weatherDataId");
                    _weatherDataId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("weatherDataId");
                    OnweatherDataIdChanged();
                }
            }
        }
        private global::System.Int32 _weatherDataId;
        partial void OnweatherDataIdChanging(global::System.Int32 value);
        partial void OnweatherDataIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime nextUpdate
        {
            get
            {
                return _nextUpdate;
            }
            set
            {
                OnnextUpdateChanging(value);
                ReportPropertyChanging("nextUpdate");
                _nextUpdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("nextUpdate");
                OnnextUpdateChanged();
            }
        }
        private global::System.DateTime _nextUpdate;
        partial void OnnextUpdateChanging(global::System.DateTime value);
        partial void OnnextUpdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime lastUpdate
        {
            get
            {
                return _lastUpdate;
            }
            set
            {
                OnlastUpdateChanging(value);
                ReportPropertyChanging("lastUpdate");
                _lastUpdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("lastUpdate");
                OnlastUpdateChanged();
            }
        }
        private global::System.DateTime _lastUpdate;
        partial void OnlastUpdateChanging(global::System.DateTime value);
        partial void OnlastUpdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime timeFrom
        {
            get
            {
                return _timeFrom;
            }
            set
            {
                OntimeFromChanging(value);
                ReportPropertyChanging("timeFrom");
                _timeFrom = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("timeFrom");
                OntimeFromChanged();
            }
        }
        private global::System.DateTime _timeFrom;
        partial void OntimeFromChanging(global::System.DateTime value);
        partial void OntimeFromChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime timeTo
        {
            get
            {
                return _timeTo;
            }
            set
            {
                OntimeToChanging(value);
                ReportPropertyChanging("timeTo");
                _timeTo = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("timeTo");
                OntimeToChanged();
            }
        }
        private global::System.DateTime _timeTo;
        partial void OntimeToChanging(global::System.DateTime value);
        partial void OntimeToChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 period
        {
            get
            {
                return _period;
            }
            set
            {
                OnperiodChanging(value);
                ReportPropertyChanging("period");
                _period = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("period");
                OnperiodChanged();
            }
        }
        private global::System.Int32 _period;
        partial void OnperiodChanging(global::System.Int32 value);
        partial void OnperiodChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 symbolNumber
        {
            get
            {
                return _symbolNumber;
            }
            set
            {
                OnsymbolNumberChanging(value);
                ReportPropertyChanging("symbolNumber");
                _symbolNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("symbolNumber");
                OnsymbolNumberChanged();
            }
        }
        private global::System.Int32 _symbolNumber;
        partial void OnsymbolNumberChanging(global::System.Int32 value);
        partial void OnsymbolNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String windDirection
        {
            get
            {
                return _windDirection;
            }
            set
            {
                OnwindDirectionChanging(value);
                ReportPropertyChanging("windDirection");
                _windDirection = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("windDirection");
                OnwindDirectionChanged();
            }
        }
        private global::System.String _windDirection;
        partial void OnwindDirectionChanging(global::System.String value);
        partial void OnwindDirectionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double windDegrees
        {
            get
            {
                return _windDegrees;
            }
            set
            {
                OnwindDegreesChanging(value);
                ReportPropertyChanging("windDegrees");
                _windDegrees = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("windDegrees");
                OnwindDegreesChanged();
            }
        }
        private global::System.Double _windDegrees;
        partial void OnwindDegreesChanging(global::System.Double value);
        partial void OnwindDegreesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double windSpeed
        {
            get
            {
                return _windSpeed;
            }
            set
            {
                OnwindSpeedChanging(value);
                ReportPropertyChanging("windSpeed");
                _windSpeed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("windSpeed");
                OnwindSpeedChanged();
            }
        }
        private global::System.Double _windSpeed;
        partial void OnwindSpeedChanging(global::System.Double value);
        partial void OnwindSpeedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double temperature
        {
            get
            {
                return _temperature;
            }
            set
            {
                OntemperatureChanging(value);
                ReportPropertyChanging("temperature");
                _temperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("temperature");
                OntemperatureChanged();
            }
        }
        private global::System.Double _temperature;
        partial void OntemperatureChanging(global::System.Double value);
        partial void OntemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double pressure
        {
            get
            {
                return _pressure;
            }
            set
            {
                OnpressureChanging(value);
                ReportPropertyChanging("pressure");
                _pressure = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("pressure");
                OnpressureChanged();
            }
        }
        private global::System.Double _pressure;
        partial void OnpressureChanging(global::System.Double value);
        partial void OnpressureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double precipitation
        {
            get
            {
                return _precipitation;
            }
            set
            {
                OnprecipitationChanging(value);
                ReportPropertyChanging("precipitation");
                _precipitation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("precipitation");
                OnprecipitationChanged();
            }
        }
        private global::System.Double _precipitation;
        partial void OnprecipitationChanging(global::System.Double value);
        partial void OnprecipitationChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WeatherApp.Models", "FK_WeatherData_GeoName", "GeoName")]
        public GeoName GeoName
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeoName>("WeatherApp.Models.FK_WeatherData_GeoName", "GeoName").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeoName>("WeatherApp.Models.FK_WeatherData_GeoName", "GeoName").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeoName> GeoNameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeoName>("WeatherApp.Models.FK_WeatherData_GeoName", "GeoName");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeoName>("WeatherApp.Models.FK_WeatherData_GeoName", "GeoName", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
